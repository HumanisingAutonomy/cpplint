[build-system]
requires = [
    "poetry_core>=1.0.7",
    "nox>=2021.10.1",
    "poetry==1.1.11",
    "nox-poetry==0.8.6"
    ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "hal"
version = "0.0.1"
description = "Humanizing Autonomy Linting Tool"
license = "Proprietory"
authors = [
    "Richard Vodden <richard@humanisingautonomy.com>"
]
readme = "README.rst"
packages = [{ include = "halint" }]
repository = "https://github.com/humanisingautonomy/halint"
homepage = "https://github.com/humanisingautonomy/halint"
keywords = ['platform','automation','devex','lint','python','c++']

[[tool.poetry.source]]
name = "hapypi"
url = "https://humanisingautonomy.jfrog.io/artifactory/api/pypi/ha-pypi/simple"
default = true

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.dev-dependencies]
flake8 = "^5.0.4"
flake8-polyfill = "^1.0.2"
pylint = "^2.15.2"
tox = "^3.26.0"
tox-pyenv = "^1.1.0"
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
pyparsing = "^3.0.9"
zipp = "^3.8.1"
configparser = "^5.3.0"
testfixtures = "^7.0.0"

[tool.poetry.scripts]
pylint="main:main"

[tool.pytest.ini_options]
testpaths = ["tests", "halint"]
python_files = "test_*.py"
python_functions = "test*"
junit_duration_report = "call"
junit_suite_name = "halint"
junit_family = "xunit1"

[tool.coverage.run]
branch = true
source = ["halint/"]

[tool.coverage.report]
show_missing = true

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
known_third_party = "celery,django,environ,pyquery,pytz,redis,requests,rest_framework"

[mypy]
# follow and type check all modules, including third-party ones
follow_imports = "normal"
# precede all errors with “note” messages explaining the context of the error
show_error_context = true
# This is the last resort solution, we should fine-tune it with
# specific sections [mypy-<library_name>] for libraries that
# have missing stubs or issues with imports
# https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports
ignore_missing_imports = true
# Check all defs, even untyped ones (with less precise semantics)
check_untyped_defs = true
# All functions/methods should have complete signatures
# (this basically disallows gradual typing for all module-level definitions)
disallow_incomplete_defs = true
# all writes to cache should be discarded
# (it's different from incremental mode)
cache_dir = "/dev/null"
# report an error whenever the code uses an unnecessary cast
# that can safely be removed.
warn_redundant_casts = true
# warn about unused [mypy-<pattern>] config file sections.
warn_unused_configs = true
# find gaps and omissions in type stubs, including third-party ones
warn_incomplete_stub = true
# helps to find any `# type: ignore` annotations that we no longer need
warn_unused_ignores = true
# All arguments that allow None should be annotated as Optional[T]
strict_optional = true
# stop treating arguments with a None default value as having
# an implicit Optional[T] type
no_implicit_optional = true
