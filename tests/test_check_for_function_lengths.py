import pytest

from .base_case import CpplintTestBase

import halint.cpplint as cpplint

class TestCheckForFunctionLengths(CpplintTestBase):

    @pytest.fixture(autouse=True)
    def setUp(self):
        # Reducing these thresholds for the tests speeds up tests significantly.
        self.old_normal_trigger = cpplint._FunctionState._NORMAL_TRIGGER
        self.old_test_trigger = cpplint._FunctionState._TEST_TRIGGER

        cpplint._FunctionState._NORMAL_TRIGGER = 10
        cpplint._FunctionState._TEST_TRIGGER = 25

        yield

        ## teardown
        cpplint._FunctionState._NORMAL_TRIGGER = self.old_normal_trigger
        cpplint._FunctionState._TEST_TRIGGER = self.old_test_trigger

    def TestFunctionLengthsCheck(self, code, expected_message):
        """Check warnings for long function bodies are as expected.

        Args:
          code: C++ source code expected to generate a warning message.
          expected_message: Message expected to be generated by the C++ code.
        """
        assert expected_message == self.PerformFunctionLengthsCheck(code)

    def TriggerLines(self, error_level):
        """Return number of lines needed to trigger a function length warning.

        Args:
          error_level: --v setting for cpplint.

        Returns:
          Number of lines needed to trigger a function length warning.
        """
        return cpplint._FunctionState._NORMAL_TRIGGER * 2**error_level

    def TestLines(self, error_level):
        """Return number of lines needed to trigger a test function length warning.

        Args:
          error_level: --v setting for cpplint.

        Returns:
          Number of lines needed to trigger a test function length warning.
        """
        return cpplint._FunctionState._TEST_TRIGGER * 2**error_level

    def TestFunctionLengthCheckDefinition(self, lines, error_level):
        """Generate long function definition and check warnings are as expected.

        Args:
          lines: Number of lines to generate.
          error_level:  --v setting for cpplint.
        """
        trigger_level = self.TriggerLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            'void test(int x)' + self.FunctionBody(lines),
            ('Small and focused functions are preferred: '
             'test() has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]'
             % (lines, trigger_level, error_level)))

    def TestFunctionLengthCheckDefinitionOK(self, lines):
        """Generate shorter function definition and check no warning is produced.

        Args:
          lines: Number of lines to generate.
        """
        self.TestFunctionLengthsCheck(
            'void test(int x)' + self.FunctionBody(lines),
            '')

    def TestFunctionLengthCheckAtErrorLevel(self, error_level):
        """Generate and check function at the trigger level for --v setting.

        Args:
          error_level: --v setting for cpplint.
        """
        self.TestFunctionLengthCheckDefinition(self.TriggerLines(error_level),
                                               error_level)

    def TestFunctionLengthCheckBelowErrorLevel(self, error_level):
        """Generate and check function just below the trigger level for --v setting.

        Args:
          error_level: --v setting for cpplint.
        """
        self.TestFunctionLengthCheckDefinition(self.TriggerLines(error_level)-1,
                                               error_level-1)

    def TestFunctionLengthCheckAboveErrorLevel(self, error_level):
        """Generate and check function just above the trigger level for --v setting.

        Args:
          error_level: --v setting for cpplint.
        """
        self.TestFunctionLengthCheckDefinition(self.TriggerLines(error_level)+1,
                                               error_level)

    def FunctionBody(self, number_of_lines):
        return ' {\n' + '    this_is_just_a_test();\n'*number_of_lines + '}'

    def FunctionBodyWithBlankLines(self, number_of_lines):
        return ' {\n' + '    this_is_just_a_test();\n\n'*number_of_lines + '}'

    def FunctionBodyWithNoLints(self, number_of_lines):
        return (' {\n' +
                '    this_is_just_a_test();  // NOLINT\n'*number_of_lines + '}')

    # Test line length checks.
    def testFunctionLengthCheckDeclaration(self):
        self.TestFunctionLengthsCheck(
            'void test();',  # Not a function definition
            '')

    def testFunctionLengthCheckDeclarationWithBlockFollowing(self):
        self.TestFunctionLengthsCheck(
            ('void test();\n'
             + self.FunctionBody(66)),  # Not a function definition
            '')

    def testFunctionLengthCheckClassDefinition(self):
        self.TestFunctionLengthsCheck(  # Not a function definition
            'class Test' + self.FunctionBody(66) + ';',
            '')

    def testFunctionLengthCheckTrivial(self):
        self.TestFunctionLengthsCheck(
            'void test() {}',  # Not counted
            '')

    def testFunctionLengthCheckEmpty(self):
        self.TestFunctionLengthsCheck(
            'void test() {\n}',
            '')

    def testFunctionLengthCheckDefinitionBelowSeverity0(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthCheckDefinitionOK(self.TriggerLines(0)-1)
        cpplint._cpplint_state.verbose_level = old_verbosity

    def testFunctionLengthCheckDefinitionAtSeverity0(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthCheckDefinitionOK(self.TriggerLines(0))
        cpplint._cpplint_state.verbose_level = old_verbosity

    def testFunctionLengthCheckDefinitionAboveSeverity0(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthCheckAboveErrorLevel(0)
        cpplint._cpplint_state.verbose_level = old_verbosity

    def testFunctionLengthCheckDefinitionBelowSeverity1v0(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthCheckBelowErrorLevel(1)
        cpplint._cpplint_state.verbose_level = old_verbosity

    def testFunctionLengthCheckDefinitionAtSeverity1v0(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthCheckAtErrorLevel(1)
        cpplint._cpplint_state.verbose_level = old_verbosity

    def testFunctionLengthCheckDefinitionBelowSeverity1(self):
        self.TestFunctionLengthCheckDefinitionOK(self.TriggerLines(1)-1)

    def testFunctionLengthCheckDefinitionAtSeverity1(self):
        self.TestFunctionLengthCheckDefinitionOK(self.TriggerLines(1))

    def testFunctionLengthCheckDefinitionAboveSeverity1(self):
        self.TestFunctionLengthCheckAboveErrorLevel(1)

    def testFunctionLengthCheckDefinitionSeverity1PlusBlanks(self):
        error_level = 1
        error_lines = self.TriggerLines(error_level) + 1
        trigger_level = self.TriggerLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            'void test_blanks(int x)' + self.FunctionBody(error_lines),
            ('Small and focused functions are preferred: '
             'test_blanks() has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines, trigger_level, error_level))

    def testFunctionLengthCheckComplexDefinitionSeverity1(self):
        error_level = 1
        error_lines = self.TriggerLines(error_level) + 1
        trigger_level = self.TriggerLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            ('my_namespace::my_other_namespace::MyVeryLongTypeName*\n'
             'my_namespace::my_other_namespace::MyFunction(int arg1, char* arg2)'
             + self.FunctionBody(error_lines)),
            ('Small and focused functions are preferred: '
             'my_namespace::my_other_namespace::MyFunction()'
             ' has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines, trigger_level, error_level))

    def testFunctionLengthCheckDefinitionSeverity1ForTest(self):
        error_level = 1
        error_lines = self.TestLines(error_level) + 1
        trigger_level = self.TestLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            'TEST_F(Test, Mutator)' + self.FunctionBody(error_lines),
            ('Small and focused functions are preferred: '
             'TEST_F(Test, Mutator) has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines, trigger_level, error_level))

    def testFunctionLengthCheckDefinitionSeverity1ForSplitLineTest(self):
        error_level = 1
        error_lines = self.TestLines(error_level) + 1
        trigger_level = self.TestLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            ('TEST_F(GoogleUpdateRecoveryRegistryProtectedTest,\n'
             '    FixGoogleUpdate_AllValues_MachineApp)'  # note: 4 spaces
             + self.FunctionBody(error_lines)),
            ('Small and focused functions are preferred: '
             'TEST_F(GoogleUpdateRecoveryRegistryProtectedTest, '  # 1 space
             'FixGoogleUpdate_AllValues_MachineApp) has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines+1, trigger_level, error_level))

    def testFunctionLengthCheckDefinitionSeverity1ForBadTestDoesntBreak(self):
        error_level = 1
        error_lines = self.TestLines(error_level) + 1
        trigger_level = self.TestLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            ('TEST_F('
             + self.FunctionBody(error_lines)),
            ('Small and focused functions are preferred: '
             'TEST_F has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines, trigger_level, error_level))

    def testFunctionLengthCheckDefinitionSeverity1WithEmbeddedNoLints(self):
        error_level = 1
        error_lines = self.TriggerLines(error_level)+1
        trigger_level = self.TriggerLines(cpplint._cpplint_state.verbose_level)
        self.TestFunctionLengthsCheck(
            'void test(int x)' + self.FunctionBodyWithNoLints(error_lines),
            ('Small and focused functions are preferred: '
             'test() has %d non-comment lines '
             '(error triggered by exceeding %d lines).'
             '  [readability/fn_size] [%d]')
            % (error_lines, trigger_level, error_level))

    def testFunctionLengthCheckDefinitionSeverity1WithNoLint(self):
        self.TestFunctionLengthsCheck(
            ('void test(int x)' + self.FunctionBody(self.TriggerLines(1))
             + '  // NOLINT -- long function'),
            '')

    def testFunctionLengthCheckDefinitionBelowSeverity2(self):
        self.TestFunctionLengthCheckBelowErrorLevel(2)

    def testFunctionLengthCheckDefinitionSeverity2(self):
        self.TestFunctionLengthCheckAtErrorLevel(2)

    def testFunctionLengthCheckDefinitionAboveSeverity2(self):
        self.TestFunctionLengthCheckAboveErrorLevel(2)

    def testFunctionLengthCheckDefinitionBelowSeverity3(self):
        self.TestFunctionLengthCheckBelowErrorLevel(3)

    def testFunctionLengthCheckDefinitionSeverity3(self):
        self.TestFunctionLengthCheckAtErrorLevel(3)

    def testFunctionLengthCheckDefinitionAboveSeverity3(self):
        self.TestFunctionLengthCheckAboveErrorLevel(3)

    def testFunctionLengthCheckDefinitionBelowSeverity4(self):
        self.TestFunctionLengthCheckBelowErrorLevel(4)

    def testFunctionLengthCheckDefinitionSeverity4(self):
        self.TestFunctionLengthCheckAtErrorLevel(4)

    def testFunctionLengthCheckDefinitionAboveSeverity4(self):
        self.TestFunctionLengthCheckAboveErrorLevel(4)

    def testFunctionLengthCheckDefinitionBelowSeverity5(self):
        self.TestFunctionLengthCheckBelowErrorLevel(5)

    def testFunctionLengthCheckDefinitionAtSeverity5(self):
        self.TestFunctionLengthCheckAtErrorLevel(5)

    def testFunctionLengthCheckDefinitionAboveSeverity5(self):
        self.TestFunctionLengthCheckAboveErrorLevel(5)

    def testFunctionLengthCheckDefinitionHugeLines(self):
        # 5 is the limit
        self.TestFunctionLengthCheckDefinition(self.TriggerLines(10), 5)

    def testFunctionLengthNotDeterminable(self):
        # Macro invocation without terminating semicolon.
        self.TestFunctionLengthsCheck(
            'MACRO(arg)',
            '')

        # Macro with underscores
        self.TestFunctionLengthsCheck(
            'MACRO_WITH_UNDERSCORES(arg1, arg2, arg3)',
            '')

        self.TestFunctionLengthsCheck(
            'NonMacro(arg)',
            'Lint failed to find start of function body.'
            '  [readability/fn_size] [5]')

    def testFunctionLengthCheckWithNamespace(self):
        old_verbosity = cpplint._cpplint_state.verbose_level
        cpplint._cpplint_state.verbose_level = 0
        self.TestFunctionLengthsCheck(
            ('namespace {\n'
             'void CodeCoverageCL35256059() {\n' +
             ('  X++;\n' * 3000) +
             '}\n'
             '}  // namespace\n'),
            ('Small and focused functions are preferred: '
             'CodeCoverageCL35256059() has 3000 non-comment lines '
             '(error triggered by exceeding 10 lines).'
             '  [readability/fn_size] [5]'))
        cpplint._cpplint_state.verbose_level = old_verbosity
